// AUTH-USERS-SERVICE/src/services/user/base/UserBase.service.ts
import { UserStatus } from "../../../models/interfaces/user.roles";

export abstract class UserBaseService {
  protected abstract userModel: any;

  // ‚úÖ M√âTODOS DE RESPOSTA PADR√ÉO
  protected successResponse(
    data: any,
    statusCode: number = 200,
    message?: string
  ) {
    return {
      success: true,
      data,
      message,
      statusCode,
    };
  }

  protected errorResponse(
    error: string,
    code: string,
    statusCode: number = 400,
    details?: any
  ) {
    return {
      success: false,
      error,
      code,
      statusCode,
      details,
    };
  }

  // ‚úÖ M√âTODO ABSTRATO PARA ENRIQUECER DADOS DO USU√ÅRIO
  protected abstract enrichUserData(user: any): any;

  // ‚úÖ M√âTODO ABSTRATO PARA MAPEAR PARA SESS√ÉO
  protected abstract mapToSessionUser(user: any): any;

  // ‚úÖ VERIFICAR DISPONIBILIDADE DE EMAIL
  protected async isEmailAvailable(email: string): Promise<boolean> {
    const user = await this.userModel.findOne({
      email: email.toLowerCase().trim(),
    });
    return !user;
  }

  // ‚úÖ CRIAR USU√ÅRIO (m√©todo base)
  public async createUser(userData: any) {
    try {
      console.log("üéØ Criando usu√°rio com dados:", {
        email: userData.email,
        firstName: userData.fullName?.firstName,
      });

      // üéØ VALIDA√á√ïES B√ÅSICAS
      if (!userData.fullName?.firstName) {
        return this.errorResponse("Nome √© obrigat√≥rio", "INVALID_NAME", 400);
      }

      if (!userData.acceptTerms) {
        return this.errorResponse(
          "Termos devem ser aceitos",
          "TERMS_NOT_ACCEPTED",
          400
        );
      }

      if (!(await this.isEmailAvailable(userData.email))) {
        return this.errorResponse("Email j√° cadastrado", "EMAIL_EXISTS", 409);
      }

      // ‚úÖ CRIAR USU√ÅRIO (implementa√ß√£o espec√≠fica nas classes filhas)
      const result = await this.createSpecificUser(userData);

      if (!result.success) {
        return result;
      }

      console.log(
        `‚úÖ Usu√°rio criado: ${result.data.user?.id || result.data._id}`
      );

      return this.successResponse(
        result.data,
        201,
        "Usu√°rio criado com sucesso"
      );
    } catch (error) {
      console.error("[UserBaseService] Erro ao criar usu√°rio:", error);
      return this.errorResponse(
        "Erro ao criar usu√°rio",
        "CREATE_USER_ERROR",
        500,
        error
      );
    }
  }

  // ‚úÖ M√âTODO ABSTRATO PARA CRIA√á√ÉO ESPEC√çFICA
  protected abstract createSpecificUser(userData: any): Promise<any>;

  // ‚úÖ OBTER PERFIL DO USU√ÅRIO
  public async getProfile(userId: string) {
    try {
      const user = await this.userModel.findById(userId).select("-password");

      if (!user) {
        return this.errorResponse(
          "Usu√°rio n√£o encontrado",
          "USER_NOT_FOUND",
          404
        );
      }

      return this.successResponse(this.enrichUserData(user));
    } catch (error) {
      console.error("[UserBaseService] Erro ao buscar perfil:", error);
      return this.errorResponse(
        "Erro ao buscar perfil",
        "GET_PROFILE_ERROR",
        500,
        error
      );
    }
  }

  // ‚úÖ ATIVAR CONTA
  public async activateAccount(userId: string) {
    try {
      const user = await this.userModel.findById(userId);

      if (!user) {
        return this.errorResponse(
          "Usu√°rio n√£o encontrado",
          "USER_NOT_FOUND",
          404
        );
      }

      user.isVerified = true;
      user.isActive = true;
      user.status = UserStatus.ACTIVE;
      user.emailVerifiedAt = new Date();
      await user.save();

      console.log(`‚úÖ Conta ativada: ${user._id}`);

      return this.successResponse(
        this.enrichUserData(user),
        200,
        "Conta ativada com sucesso"
      );
    } catch (error) {
      console.error("[UserBaseService] Erro ao ativar conta:", error);
      return this.errorResponse(
        "Erro ao ativar conta",
        "ACTIVATION_ERROR",
        500,
        error
      );
    }
  }

  // ‚úÖ SOFT DELETE USER
  public async softDeleteUser(userId: string, deletedBy: string) {
    try {
      const user = await this.userModel.findById(userId);

      if (!user) {
        return this.errorResponse(
          "Usu√°rio n√£o encontrado",
          "USER_NOT_FOUND",
          404
        );
      }

      if (user.deletedAt) {
        return this.errorResponse(
          "Usu√°rio j√° est√° exclu√≠do",
          "USER_ALREADY_DELETED",
          400
        );
      }

      // ‚úÖ SOFT DELETE
      user.deletedAt = new Date();
      user.deletedBy = deletedBy;
      user.isActive = false;
      user.status = UserStatus.DELETED;

      await user.save();

      console.log(`‚úÖ Usu√°rio soft-deleted: ${userId} por ${deletedBy}`);

      return this.successResponse(
        {
          id: user._id.toString(),
          email: user.email,
          deletedAt: user.deletedAt,
          deletedBy: user.deletedBy,
          status: user.status,
        },
        200,
        "Usu√°rio exclu√≠do com sucesso"
      );
    } catch (error) {
      console.error("[UserBaseService] Erro no soft delete:", error);
      return this.errorResponse(
        "Erro ao excluir usu√°rio",
        "SOFT_DELETE_ERROR",
        500,
        error
      );
    }
  }

  // ‚úÖ RESTAURAR USER
  public async restoreUser(userId: string) {
    try {
      const user = await this.userModel.findById(userId);

      if (!user) {
        return this.errorResponse(
          "Usu√°rio n√£o encontrado",
          "USER_NOT_FOUND",
          404
        );
      }

      if (!user.deletedAt) {
        return this.errorResponse(
          "Usu√°rio n√£o est√° exclu√≠do",
          "USER_NOT_DELETED",
          400
        );
      }

      // ‚úÖ RESTAURAR
      user.deletedAt = undefined;
      user.deletedBy = undefined;
      user.isActive = true;
      user.status = UserStatus.ACTIVE;

      await user.save();

      console.log(`‚úÖ Usu√°rio restaurado: ${userId}`);

      return this.successResponse(
        this.enrichUserData(user),
        200,
        "Usu√°rio restaurado com sucesso"
      );
    } catch (error) {
      console.error("[UserBaseService] Erro ao restaurar usu√°rio:", error);
      return this.errorResponse(
        "Erro ao restaurar usu√°rio",
        "RESTORE_USER_ERROR",
        500,
        error
      );
    }
  }

  // ‚úÖ DELETAR PERMANENTEMENTE (HARD DELETE - APENAS ADMIN)
  public async hardDeleteUser(userId: string) {
    try {
      const user = await this.userModel.findById(userId);

      if (!user) {
        return this.errorResponse(
          "Usu√°rio n√£o encontrado",
          "USER_NOT_FOUND",
          404
        );
      }

      // ‚úÖ HARD DELETE
      await this.userModel.findByIdAndDelete(userId);

      console.log(`üóëÔ∏è Usu√°rio hard-deleted: ${userId}`);

      return this.successResponse(
        {
          id: userId,
          message: "Usu√°rio exclu√≠do permanentemente",
        },
        200,
        "Usu√°rio exclu√≠do permanentemente"
      );
    } catch (error) {
      console.error("[UserBaseService] Erro no hard delete:", error);
      return this.errorResponse(
        "Erro ao excluir usu√°rio permanentemente",
        "HARD_DELETE_ERROR",
        500,
        error
      );
    }
  }

  // ‚úÖ ATUALIZAR STATUS DO USU√ÅRIO
  public async updateUserStatus(userId: string, status: UserStatus) {
    try {
      const validStatuses = Object.values(UserStatus);
      if (!validStatuses.includes(status)) {
        return this.errorResponse("Status inv√°lido", "INVALID_STATUS", 400);
      }

      const user = await this.userModel
        .findByIdAndUpdate(
          userId,
          {
            $set: {
              status,
              isActive: status === UserStatus.ACTIVE,
              ...(status !== UserStatus.ACTIVE && {
                deactivatedAt: new Date(),
              }),
            },
          },
          { new: true, runValidators: true }
        )
        .select("-password");

      if (!user) {
        return this.errorResponse(
          "Usu√°rio n√£o encontrado",
          "USER_NOT_FOUND",
          404
        );
      }

      return this.successResponse(
        this.enrichUserData(user),
        200,
        `Status do usu√°rio atualizado para ${status}`
      );
    } catch (error) {
      console.error("[UserBaseService] Erro ao atualizar status:", error);
      return this.errorResponse(
        "Erro ao atualizar status",
        "UPDATE_STATUS_ERROR",
        500,
        error
      );
    }
  }

  // ‚úÖ LISTAR USU√ÅRIOS (PAGINA√á√ÉO)
  public async listUsers(options: {
    page: number;
    limit: number;
    search?: string;
    status?: string;
  }) {
    try {
      const { page, limit, search, status } = options;
      const skip = (page - 1) * limit;

      let query: any = {};

      if (search) {
        query.$or = [
          { email: { $regex: search, $options: "i" } },
          { "fullName.firstName": { $regex: search, $options: "i" } },
          { "fullName.lastName": { $regex: search, $options: "i" } },
        ];
      }

      if (status) {
        query.status = status;
      }

      const users = await this.userModel
        .find(query)
        .select("-password")
        .skip(skip)
        .limit(limit)
        .sort({ createdAt: -1 });

      const total = await this.userModel.countDocuments(query);

      return this.successResponse({
        users: users.map((user: any) => this.enrichUserData(user)),
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit),
        },
      });
    } catch (error) {
      console.error("[UserBaseService] Erro ao listar usu√°rios:", error);
      return this.errorResponse(
        "Erro ao listar usu√°rios",
        "LIST_USERS_ERROR",
        500,
        error
      );
    }
  }

  // ‚úÖ BUSCAR USU√ÅRIO POR EMAIL
  public async findByEmail(email: string) {
    try {
      const user = await this.userModel
        .findOne({
          email: email.toLowerCase().trim(),
        })
        .select("-password");

      if (!user) {
        return this.errorResponse(
          "Usu√°rio n√£o encontrado",
          "USER_NOT_FOUND",
          404
        );
      }

      return this.successResponse(this.enrichUserData(user));
    } catch (error) {
      console.error("[UserBaseService] Erro ao buscar usu√°rio:", error);
      return this.errorResponse(
        "Erro ao buscar usu√°rio",
        "FIND_USER_ERROR",
        500,
        error
      );
    }
  }

  // ‚úÖ ATUALIZAR √öLTIMO LOGIN
  public async updateLastLogin(userId: string) {
    try {
      const user = await this.userModel
        .findByIdAndUpdate(
          userId,
          { $set: { lastLogin: new Date() } },
          { new: true }
        )
        .select("-password");

      if (!user) {
        return this.errorResponse(
          "Usu√°rio n√£o encontrado",
          "USER_NOT_FOUND",
          404
        );
      }

      return this.successResponse({
        lastLogin: user.lastLogin,
        message: "√öltimo login atualizado",
      });
    } catch (error) {
      console.error("[UserBaseService] Erro ao atualizar √∫ltimo login:", error);
      return this.errorResponse(
        "Erro ao atualizar √∫ltimo login",
        "UPDATE_LOGIN_ERROR",
        500,
        error
      );
    }
  }
}
