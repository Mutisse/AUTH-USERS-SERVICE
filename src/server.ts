import "dotenv/config";
import app from "./app";
import chalk from "chalk";
import databaseManager from "./config/database";

const PORT = Number(process.env.PORT) || 3001;
const HOST = process.env.HOST || "0.0.0.0";
const NODE_ENV = process.env.NODE_ENV || "development";

let server: ReturnType<typeof app.listen> | null = null;

// üéØ CORES PADRONIZADAS
const colors = {
  success: chalk.green,
  info: chalk.blue,
  warning: chalk.yellow,
  error: chalk.red,
  debug: chalk.magenta,
  gray: chalk.gray,
  cyan: chalk.cyan,
  yellow: chalk.yellow,
  green: chalk.green,
};

function logStartupInfo() {
  console.log(colors.success.bold(`\n‚ú® Iniciando Auth Users Service`));
  console.log(colors.info(`   üìç Porta: ${PORT}`));
  console.log(colors.info(`   üåø Ambiente: ${NODE_ENV}`));
  console.log(colors.info(`   üè† Host: ${HOST}`));
  console.log(colors.info(`   üîó URL: http://localhost:${PORT}`));
}

function logAvailableEndpoints() {
  console.log(`\nüìä ${colors.cyan("ENDPOINTS DISPON√çVEIS:")}`);

  console.log(`\n${colors.yellow("üè† ROTAS PRINCIPAIS")}`);
  console.log(
    `   ‚ù§Ô∏è  ${colors.green(
      "Health:"
    )} http://localhost:${PORT}/UserService/health`
  );
  console.log(
    `   üè† ${colors.green("Welcome:")} http://localhost:${PORT}/UserService/`
  );
  console.log(
    `   üîç ${colors.green(
      "Diagn√≥stico:"
    )} http://localhost:${PORT}/UserService/diagnostic/system-analysis`
  );

  console.log(`\n${colors.yellow("üîê AUTENTICA√á√ÉO")}`);
  console.log(
    `   üë§ ${colors.green(
      "Register:"
    )} http://localhost:${PORT}/UserService/auth/register`
  );
  console.log(
    `   üîê ${colors.green(
      "Login:"
    )} http://localhost:${PORT}/UserService/auth/login`
  );
  console.log(
    `   üìß ${colors.green(
      "Check Email:"
    )} http://localhost:${PORT}/UserService/auth/check-email`
  );
  console.log(
    `   üîÑ ${colors.green(
      "Refresh Token:"
    )} http://localhost:${PORT}/UserService/auth/refresh-token`
  );
  console.log(
    `   üö™ ${colors.green(
      "Logout:"
    )} http://localhost:${PORT}/UserService/auth/logout`
  );
  console.log(
    `   üîë ${colors.green(
      "Forgot Password:"
    )} http://localhost:${PORT}/UserService/auth/forgot-password`
  );
  console.log(
    `   üîÑ ${colors.green(
      "Reset Password:"
    )} http://localhost:${PORT}/UserService/auth/reset-password`
  );

  console.log(`\n${colors.yellow("üë• GEST√ÉO DE USU√ÅRIOS")}`);
  console.log(
    `   üë• ${colors.green(
      "Clients:"
    )} http://localhost:${PORT}/UserService/clients`
  );
  console.log(
    `   üíº ${colors.green(
      "Employees:"
    )} http://localhost:${PORT}/UserService/employees`
  );
  console.log(
    `   üë®‚Äçüíº ${colors.green(
      "Admins:"
    )} http://localhost:${PORT}/UserService/admins`
  );

  console.log(`\n${colors.yellow("üì± OTP SERVICE")}`);
  console.log(
    `   üì§ ${colors.green(
      "Send OTP:"
    )} http://localhost:${PORT}/UserService/otp/send`
  );
  console.log(
    `   ‚úÖ ${colors.green(
      "Verify OTP:"
    )} http://localhost:${PORT}/UserService/otp/verify`
  );
  console.log(
    `   üîÑ ${colors.green(
      "Resend OTP:"
    )} http://localhost:${PORT}/UserService/otp/resend`
  );

  console.log(`\n${colors.yellow("ü©∫ DIAGN√ìSTICO")}`);
  console.log(
    `   üîç ${colors.green(
      "System Analysis:"
    )} http://localhost:${PORT}/UserService/diagnostic/system-analysis`
  );
  console.log(
    `   üóÇÔ∏è ${colors.green(
      "Routes Detailed:"
    )} http://localhost:${PORT}/UserService/diagnostic/routes-detailed`
  );
  console.log(
    `   üì¶ ${colors.green(
      "Dependencies:"
    )} http://localhost:${PORT}/UserService/diagnostic/dependencies`
  );
  console.log(
    `   üåê ${colors.green(
      "Services Status:"
    )} http://localhost:${PORT}/UserService/diagnostic/services-status`
  );
  console.log(
    `   üîó ${colors.green(
      "Connectivity Test:"
    )} http://localhost:${PORT}/UserService/diagnostic/connectivity-test`
  );

  console.log(`\n${colors.yellow("üîê SESS√ïES")}`);
  console.log(
    `   üìã ${colors.green(
      "Sessions:"
    )} http://localhost:${PORT}/UserService/sessions`
  );
  console.log(
    `   üë• ${colors.green(
      "Active Sessions:"
    )} http://localhost:${PORT}/UserService/auth/active-sessions`
  );

  console.log(
    `\n${colors.gray("üí° DICA:")} Use ${colors.cyan(
      "/UserService/health"
    )} para ver todos os endpoints dispon√≠veis`
  );
}

async function startServer() {
  try {
    logStartupInfo();

    console.log(colors.debug("üóÑÔ∏è  Conectando ao MongoDB..."));
    await databaseManager.connectDB();

    server = app.listen(PORT, HOST, () => {
      console.log(
        colors.success.bold(`\nüéâ Auth Users Service iniciado com sucesso!`)
      );

      logAvailableEndpoints();

      console.log(
        colors.gray(`\n‚è∞ Iniciado em: ${new Date().toLocaleString("pt-BR")}`)
      );
      console.log(`\nüöÄ ${colors.success("Servi√ßo pronto!")}\n`);
    });

    attachErrorHandlers();
  } catch (error) {
    console.error(colors.error.bold(`\nüí• Falha na inicializa√ß√£o`));
    console.error(
      colors.error(
        `   üìã Erro: ${
          error instanceof Error ? error.message : "Erro desconhecido"
        }`
      )
    );
    process.exit(1);
  }
}

async function gracefulShutdown(signal: string, callback?: () => void) {
  console.log(colors.warning(`\nüîÑ Recebido ${signal}, encerrando...`));

  if (!server) {
    console.log(colors.warning(`‚ö†Ô∏è  Servidor j√° parado`));
    callback?.();
    return;
  }

  try {
    server.close(async () => {
      console.log(colors.info(`üõë Servidor finalizado`));
      await databaseManager.disconnectDB();
      console.log(colors.info(`üì¶ MongoDB desconectado`));
      server = null;
      console.log(colors.success(`‚úÖ Recursos liberados`));
      callback?.();
    });

    setTimeout(() => {
      console.error(colors.error(`‚è∞ Timeout no desligamento`));
      process.exit(1);
    }, 10000);
  } catch (error) {
    console.error(colors.error(`‚ùå Erro no desligamento`));
    process.exit(1);
  }
}

function attachErrorHandlers() {
  process.on("SIGINT", () => gracefulShutdown("SIGINT", () => process.exit(0)));
  process.on("SIGTERM", () =>
    gracefulShutdown("SIGTERM", () => process.exit(0))
  );

  process.on("uncaughtException", (err) => {
    console.error(colors.error.bold(`\nüö® Erro n√£o capturado`));
    console.error(colors.error(`   üìù ${err.message}`));
    gracefulShutdown("uncaughtException", () => process.exit(1));
  });

  process.on("unhandledRejection", (reason, promise) => {
    console.error(colors.error.bold(`\n‚ö†Ô∏è  Promessa rejeitada`));
  });
}

startServer();

export { gracefulShutdown };
